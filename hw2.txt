1. Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

Чтобы отказаться от изменений в файле, находящемся в рабочем каталоге, нужно использовать команду git checkout <filename>. Эта команда заменит измененный файл на последнюю версию файла из репозитория, тем самым отменяя все изменения. Если нужно отменить изменения в нескольких файлах, то нужно указать их имена через пробел: git checkout <file1> <file2> . Важно убедиться, что изменения в этих файлах не были сохранены коммитом, иначе они будут удалены без возможности их восстановления. Если необходимо отказаться от изменений во вскх файлах то следует написать git checkout .


2. Как вернуть файл из индекса в рабочий каталог?

Чтобы вернуть файл из индекса в рабочий каталог, нужно использовать команду git reset <filename>. Эта команда удаляет файл из индекса и возвращает его в состояние, которое было до добавления в индекс. Файл останется измененным, но изменения не будут зафиксированы в следующем коммите. Так же, как было сказано на занятии, в более поздних версиях используется git restore --staged <filename>.

3. Как отменить ошибочный commit?

Чтобы отменить последний commit, включая его изменения, нужно использовать команду git reset HEAD~1. Эта команда откатывает последний коммит и возвращает все изменения из последнего коммита в рабочую директорию. При этом история коммитов будет изменена, и предыдущий коммит станет последним.
Если нужно сохранить изменения из отмененного коммита, можно добавить флаг soft к команде: git reset soft HEAD~1. Это оставит изменения из коммита в индексе, что позволит сделать новый коммит с теми же изменениями. После выполнения команды git reset --soft HEAD~1 можно внести изменения в индекс, исправив ошибки в последнем коммите, и затем сделать новый коммит с помощью команды git commit --amend. 
Если коммит уже был опубликован с помощью команды git push, то отменять его нужно с помощью команды git revert <commit>. Эта команда создаст новый коммит, который отменит изменения, внесенные указанным коммитом, и добавит его в историю.


4. Как создать новую ветку и переключится в нее?

Необходимо открыть терминал и перейти в корневую директорию проекта. Убедиться, что вы находитесь в актуальной ветке, можно выполнив команду git branch. Ветка, на которой вы находитесь, будет выделена звездочкой.
Создать новую ветку можно с помощью команды git branch указав ее имя: git branch <имя новой ветки>.
Переключиться на новую ветку можно с помощью команды git checkout: git checkout <имя новой ветки>.
Вместо двух команд git branch и git checkout можно использовать одну команду git checkout с опцией -b, которая создаст новую ветку и переключит в нее: git checkout -b <имя новой ветки>.


5. В чем отличение между fast-forward merge  and non fast-forfard merge?

Fast-forward merge и non fast-forward merge - это два типа слияний (merge) веток в Git, которые отличаются тем, как Git объединяет изменения веток.

Fast-forward merge возникает, когда ветка, которую мы собираемся слить с текущей веткой, существует относительно недавно и не имеет никаких изменений, которых еще нет в текущей ветке. В этом случае Git просто перемещает указатель текущей ветки на последнюю коммит в другой ветке. Это происходит быстро, без создания нового коммита слияния.

Non fast-forward merge, с другой стороны, происходит, когда ветка, которую мы собираемся слить с текущей веткой, имеет новые изменения, которых нет в текущей ветке. В этом случае Git создает новый коммит слияния, который содержит изменения из обеих веток, а затем перемещает указатель текущей ветки на этот новый коммит. Это создает новую точку слияния в истории репозитория и сохраняет изменения из обеих веток.

Таким образом, основное отличие между fast-forward merge и non fast-forward merge заключается в том, что первый не создает новый коммит слияния, а второй создает новый коммит слияния с изменениями из обеих веток.


6. Когда может возникнуть конфликт слияния веток, как  его разрешить?

Конфликт слияния веток в Git возникает, когда две ветки, которые мы пытаемся слить, имеют разные изменения в одной и той же части файла. Например, если два разработчика одновременно вносят изменения в одну и ту же строку в одном файле, то при попытке слить эти ветки может возникнуть конфликт.

Чтобы разрешить конфликт слияния веток, нужно вручную выбрать, какие изменения должны быть сохранены и объединены. Для этого можно использовать следующие шаги:

a. Открыть консоль и перейти в рабочую директорию проекта.

b. Использовать команду git merge для объединения двух веток. Например, git merge branch-name.

c. Если в процессе слияния возникает конфликт, Git выведет сообщение об ошибке и указывает на файл, в котором возник конфликт.

d. Открыть этот файл и внести необходимые изменения вручную. Обычно Git показывает места, где конфликт возник, и помечает их как <<<<<<< HEAD, ======= и >>>>>>> branch-name. 
<<<<<<< HEAD указывает на изменения в текущей ветке, >>>>>>> branch-name - на изменения в другой ветке.

e. После внесения изменений в файл нужно сохранить его и закрыть редактор.

f. Использовать команду git add для добавления измененных файлов в индекс.

g. Использовать команду git commit для сохранения изменений.

h. После того как все изменения были сохранены, можно использовать команду git push для отправки изменений на удаленный сервер.


7. Можно ли удалить ветку? Как? 

Удаление ветки в Git возможно с помощью команды git branch -d <branchname>.

Если ветка не была полностью слита с основной веткой, то Git выдаст предупреждение о том, что ветка не была полностью слита и не удалится, пока ее изменения не будут включены в другую ветку. В этом случае, для принудительного удаления ветки можно использовать команду git branch -D <branchname>.

Прежде чем удалять ветку, нужно убедиться, что пользватель переключен на другую ветку, которую не нужно удалять. В противном случае, если удалится текущая ветка, то все изменения, которые еще не были зафиксированы, будут утрачены.

Необходимая последовательность действий для удаления ветки в Git:

a. Проверить, какая ветка сейчас активна с помощью команды git branch. Активная ветка будет выделена звездочкой *.
b. Переключиться на другую ветку с помощью команды git checkout <other-branch-name>.
c. Удалить ветку, в которой вы больше не нуждаетесь, с помощью команды git branch -d <branchname>.

После выполнения этих команд ветка будет удалена из локального репозитория Git. Удаление ветки не удалит все коммиты, которые были сделаны в ней. Если эти коммиты не сливались с другой веткой, то они будут недоступны для просмотра и восстановления.